    private static void tests(){
        // a. Füge Elemente am Anfang, am Ende und in der Mitte der Liste ein.
        DoublyLinkedList<Integer> list = new DoublyLinkedList<>();
        list.add(5); // Am Anfang
        list.add(10); // Am Ende
        list.add(1, 7); // In der Mitte
        System.out.println("List after adding elements: " + list);

        // b. Ändere einen Wert an einem bestimmten Index.
        list.set(1, 8);
        System.out.println("List after changing element at index 1: " + list);

        // c. Lösche Elemente am Anfang, am Ende und in der Mitte der Liste.
        list.remove(0); // Am Anfang
        list.remove(list.size() - 1); // Am Ende
        list.remove(0); // In der Mitte
        System.out.println("List after removing elements: " + list);

        // d. Lösche die Liste vollständig (mit clear).
        list.clear();
        System.out.println("List after clearing: " + list);

        // e. Iteriere über die Liste und gib die enthaltenen Elemente aus.
        list.add(1);
        list.add(2);
        list.add(3);
        System.out.print("List elements (iterated): ");
        for (Integer element : list) {
            System.out.print(element + " ");
        }
        System.out.println();

        // f. Erzeuge einen Stream auf der Liste und gib die enthaltenen Elemente aus.
        System.out.print("List elements (streamed): ");
        list.stream().forEach(e -> System.out.print(e + " "));
        System.out.println();

        // g. Wandle den Inhalt der Liste in ein Array um.
        Object[] array = list.toArray();
        System.out.print("Array from list: ");
        for (Object obj : array) {
            System.out.print(obj + " ");
        }
        System.out.println();

        // h. Wandle eine Menge und eine ArrayList in eine DoublyLinkedList um.
        Collection<Integer> set = Set.of(1, 2, 3);
        ArrayList<Integer> arrayList = new ArrayList<>(List.of(4, 5, 6));
        DoublyLinkedList<Integer> listFromSet = new DoublyLinkedList<>(set);
        DoublyLinkedList<Integer> listFromArray = new DoublyLinkedList<>(arrayList);
        System.out.println("List from set: " + listFromSet);
        System.out.println("List from array list: " + listFromArray);
    }



        private static void verdopplungstest(){
            int initialSize = 1000;
            int numTests = 10;
            int repeatTests = 5;
            Random rand = new Random();

            for (int test = 0; test < numTests; test++) {
                int size = initialSize * (1 << test);
                DoublyLinkedList<Integer> list = new DoublyLinkedList<>();
                for (int i = 0; i < size; i++) {
                    list.add(rand.nextInt(size));
                }

                long totalTime = 0;
                for (int repeat = 0; repeat < repeatTests; repeat++) {
                    long startTime = System.nanoTime();
                    for (int element : list) {
                        // TODO Verdopplungstest durchführen
                    }
                    long endTime = System.nanoTime();
                    totalTime += (endTime - startTime);
                }

                double averageTime = totalTime / (double) repeatTests;
                System.out.printf("Size: %d, Average iteration time: %.2f ns%n", size, averageTime);
            }
        }


            private static void test01(){
                String[] arr = {"one", "two", "three"};
                Object head, tail;
                List<String> list = new DoublyLinkedList<>();

                list.add(0, arr[0]);
                list.add(1, arr[1]);
                list.add(2, arr[2]);
                head = list.get(0);
                tail = list.get(1);
                System.out.println("DoublyLinkedList:\n" + list +
                        "\nHead: "+ head.toString() +
                        "\nTail: "+ tail.toString());
            }